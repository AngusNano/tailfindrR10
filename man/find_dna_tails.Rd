% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find-dna-tails.R
\name{find_dna_tails}
\alias{find_dna_tails}
\title{Finds poly(A) and poly(T) tails in 1D DNA reads}
\usage{
find_dna_tails(fast5_dir, data = "cdna", multifast5 = FALSE,
  basecalled_with_flipflop = FALSE, save_dir,
  csv_filename = "dna_tails.csv", num_cores = 1, save_plots = FALSE,
  plot_debug = FALSE, plotting_library = "rbokeh")
}
\arguments{
\item{fast5_dir}{a character string. Full path of the directory to search the
fast5 files in. The direcotry is searched recursively.}

\item{data}{a character string ["cdna"]. Specify here if the data is "cdna"
or "pcr-dna". Use the "cdna" option if the reads are from a direct cDNA or
amplified cDNA library. Use the "pcr-dna" option if the reads are from a
PCR DNA library. The "cdna" and "pcr-dna" options are provided here because
these two methods use different primers, and therefore, it is necessary for
the algorithm to know which primers to look for to in deciding if a read is a
poly(A) or a poly(T) read.}

\item{multifast5}{a logical [FALSE]. Set it to TRUE if the fast5 files in
fast5_dir are multifast5 files.}

\item{basecalled_with_flipflop}{a logical [FALSE]. Set it to TRUE if the
fast5 files in fast5_dir have been basecalled with Guppy's flip-flop model.}

\item{save_dir}{a character string. Full path of the directory where the CSV
file containing the tail lengths should be stored. If save_plots is set to
TRUE, then plots showing the poly(A)/(T) tails are stored within the "plots"
directory within the save_dir. This 'plots' directory is created automatically.}

\item{csv_filename}{a character string ["dna_tails.csv"]. Filename of the CSV
file in which to store the tail length data}

\item{num_cores}{a numeric [1]. Num of phyiscal cores to use in processing
the data. If you have 4 physical cores in the computer that you are using
tailfinder on, then use 3 for num_cores. Always use 1 less than the number
of cores at your disposal.}

\item{save_plots}{a logical [FALSE]. If set to TRUE, a plots directory will
be created within the save_dir, and plots showing poly(A) and poly(T) tails on
the raw squiggle will be saved in this 'plots' directory. Creating plots and
saving them to the disk is a slow process. So we recommend that you keep this
option as FALSE.}

\item{plot_debug}{a logical [FALSE]. If set to TRUE, then we will plot
debugging information in the plots as well, such as the mean signal, the
slope signal, the thresholds, the smoothened signal etc. We use this option
internally to debug our algorithm.}

\item{plotting_library}{a character string ["rbokeh"]. rbokeh is the default
plotting library that we will use if save_plots is set to TRUE. The plots will
be saved as <read_id>.html files in the /save_dir/plots directory. You can
open these .html files in any web-browser and interactively view the plots
showing the tail region in the raw squiggle. If this option is set to
'ggplot2', then the polts will be saved as .png files.}
}
\value{
A data tibble is returned containing all the information
about the tails found. Always save this returned tibble in a variable (see
examples below), otherwise the very long tibble will be printed to the
console, which will hang up your rsession.
}
\description{
This is the main function to find poly(A) and poly(T) lengths in Oxford
Nanopore's 1D DNA reads. The function can handle reads that have been
basecalled using the standard model -- as in Albacore -- or using Guppy's newest
flip-flop model. Furthermore, it can also handle multifast5 files as well.
The function saves a CSV file containing all the tail information, and also
returns a tibble containing the same information for further processing by
the end-user.
}
\examples{
\dontrun{
# 1. If the data is cDNA, and has been basecalled with Guppy's flip-flip model
# and the basecalled files are multifast5 files
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/directory",
                     csv_filename = 'dna_tails.csv',
                     num_cores = 3,
                     multifast5 = TRUE,
                     basecalled_with_flipflop = TRUE)

# 2. If the data is cDNA, and has been basecalled with Guppy's flip-flip model
# and the basecalled files are single fast5 files
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/directory",
                     csv_filename = 'dna_tails.csv',
                     num_cores = 3,
                     multifast5 = FALSE,
                     basecalled_with_flipflop = TRUE)

# 3. If the data is cDNA, and has been basecalled with the standard model
# and the basecalled files are single fast5 files
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/directory",
                     csv_filename = "dna_tails.csv",
                     num_cores = 3,
                     multifast5 = FALSE,
                     basecalled_with_flipflop = FALSE)

# 4. If the data is cDNA, and has been basecalled with the standard model
# and the basecalled files are single fast5 files. We also want to save the
# plots as interactive .html files that show the tails in the raw squiggle
# data using rbokeh plotting library
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/director",
                     csv_filename = "dna_tails.csv",
                     num_cores = 3,
                     multifast5 = FALSE,
                     basecalled_with_flipflop = FALSE,
                     save_plots = TRUE,
                     plotting_library = "rbokeh")

# 5. Same scenario as 4, but we want to use ggplot2 plotting library to save
# plots as non-interactive .png files
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/directory",
                     csv_filename = "dna_tails.csv",
                     num_cores = 3,
                     multifast5 = FALSE,
                     basecalled_with_flipflop = FALSE,
                     save_plots = TRUE,
                     plotting_library = "ggplot2")

# 6. Same scenario as 4, but we want to save the debug information as well
# in the plots
df <- find_dna_tails(fast5_dir = "/path/to/fast5/data",
                     data = "cdna",
                     save_dir = "/path/to/a/directory",
                     csv_filename = "dna_tails.csv",
                     num_cores = 3,
                     multifast5 = FALSE,
                     basecalled_with_flipflop = FALSE,
                     save_plots = TRUE,
                     plot_debug = TRUE,
                     plotting_library = "rbokeh")

}

}
